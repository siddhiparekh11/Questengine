// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"

import mock "github.com/stretchr/testify/mock"
import models "github.com/siddhiparekh11/GoChallenge/models"

// IProgress is an autogenerated mock type for the IProgress type
type IProgress struct {
	mock.Mock
}

// ConstructPlayerStateStruct provides a mock function with given fields: progress
func (_m *IProgress) ConstructPlayerStateStruct(progress *models.Progress) *models.PlayerState {
	ret := _m.Called(progress)

	var r0 *models.PlayerState
	if rf, ok := ret.Get(0).(func(*models.Progress) *models.PlayerState); ok {
		r0 = rf(progress)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.PlayerState)
		}
	}

	return r0
}

// GetAllQuestProgress provides a mock function with given fields: ctx, questId, gameId
func (_m *IProgress) GetAllQuestProgress(ctx context.Context, questId int, gameId int) ([]*models.Progress, *models.QError) {
	ret := _m.Called(ctx, questId, gameId)

	var r0 []*models.Progress
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []*models.Progress); ok {
		r0 = rf(ctx, questId, gameId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Progress)
		}
	}

	var r1 *models.QError
	if rf, ok := ret.Get(1).(func(context.Context, int, int) *models.QError); ok {
		r1 = rf(ctx, questId, gameId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*models.QError)
		}
	}

	return r0, r1
}

// GetPlayerState provides a mock function with given fields: ctx, playerId
func (_m *IProgress) GetPlayerState(ctx context.Context, playerId int) (*models.Progress, *models.QError) {
	ret := _m.Called(ctx, playerId)

	var r0 *models.Progress
	if rf, ok := ret.Get(0).(func(context.Context, int) *models.Progress); ok {
		r0 = rf(ctx, playerId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Progress)
		}
	}

	var r1 *models.QError
	if rf, ok := ret.Get(1).(func(context.Context, int) *models.QError); ok {
		r1 = rf(ctx, playerId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*models.QError)
		}
	}

	return r0, r1
}

// UpdateProgress provides a mock function with given fields: ctx, progress
func (_m *IProgress) UpdateProgress(ctx context.Context, progress models.Progress) (*models.Progress, *models.QError) {
	ret := _m.Called(ctx, progress)

	var r0 *models.Progress
	if rf, ok := ret.Get(0).(func(context.Context, models.Progress) *models.Progress); ok {
		r0 = rf(ctx, progress)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Progress)
		}
	}

	var r1 *models.QError
	if rf, ok := ret.Get(1).(func(context.Context, models.Progress) *models.QError); ok {
		r1 = rf(ctx, progress)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*models.QError)
		}
	}

	return r0, r1
}
