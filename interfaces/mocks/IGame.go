// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"

import mock "github.com/stretchr/testify/mock"
import models "github.com/siddhiparekh11/GoChallenge/models"

// IGame is an autogenerated mock type for the IGame type
type IGame struct {
	mock.Mock
}

// CreateGame provides a mock function with given fields: ctx, game
func (_m *IGame) CreateGame(ctx context.Context, game models.Game) (bool, *models.QError) {
	ret := _m.Called(ctx, game)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, models.Game) bool); ok {
		r0 = rf(ctx, game)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 *models.QError
	if rf, ok := ret.Get(1).(func(context.Context, models.Game) *models.QError); ok {
		r1 = rf(ctx, game)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*models.QError)
		}
	}

	return r0, r1
}

// GetGames provides a mock function with given fields: ctx
func (_m *IGame) GetGames(ctx context.Context) ([]*models.Game, *models.QError) {
	ret := _m.Called(ctx)

	var r0 []*models.Game
	if rf, ok := ret.Get(0).(func(context.Context) []*models.Game); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Game)
		}
	}

	var r1 *models.QError
	if rf, ok := ret.Get(1).(func(context.Context) *models.QError); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*models.QError)
		}
	}

	return r0, r1
}

// SetGameId provides a mock function with given fields: ctx, gameId
func (_m *IGame) SetGameId(ctx context.Context, gameId int) (*models.Game, *models.QError) {
	ret := _m.Called(ctx, gameId)

	var r0 *models.Game
	if rf, ok := ret.Get(0).(func(context.Context, int) *models.Game); ok {
		r0 = rf(ctx, gameId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Game)
		}
	}

	var r1 *models.QError
	if rf, ok := ret.Get(1).(func(context.Context, int) *models.QError); ok {
		r1 = rf(ctx, gameId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*models.QError)
		}
	}

	return r0, r1
}
